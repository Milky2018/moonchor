package "Milky2018/moonchor"

import(
  "moonbitlang/core/json"
)

// Values
fn comm[T : Message, From : Location, To : Location](ChoreoContext, From, To, Located[T, From]) -> Located[T, To]

fn connect_choreo[T, C : Location + Message, R : Location](Backend, (ChoreoContext, C) -> T, C, registry~ : R) -> T

fn get_locations(Backend) -> Array[&Location]

fn get_logger(Backend) -> &Logger

fn locally[T, L : Location](ChoreoContext, L, (Unwrapper[L]) -> T) -> Located[T, L]

fn make_console_logger() -> ConsoleLogger

fn make_local_backend(Array[&Location], logger~ : &Logger = ..) -> Backend

fn make_mute_logger() -> MuteLogger

fn pure[T, L : Location](ChoreoContext, L, T) -> Located[T, L]

fn run_choreo[T, L : Location](Backend, (ChoreoContext) -> T, L) -> T

fn serve_choreo[T, S : Location, C : Location + Message](Backend, (ChoreoContext, C) -> T, S) -> Unit

// Types and methods
type Backend
impl Backend {
  get_locations(Self) -> Array[&Location]
  get_logger(Self) -> &Logger
}

type ChoreoContext
impl ChoreoContext {
  announce[T : Message, L : Location, R](Self, L, Array[&Location], Located[T, L], (Self, T) -> R) -> R
  broadcast[T : Message, L : Location](Self, L, Located[T, L]) -> T
  comm[T : Message, From : Location, To : Location](Self, From, To, Located[T, From]) -> Located[T, To]
  enclave[T](Self, Array[&Location], (Self) -> T) -> T
  locally[T, L : Location](Self, L, (Unwrapper[L]) -> T) -> Located[T, L]
  locally_broadcast[T : Message, L : Location](Self, L, (Unwrapper[L]) -> T) -> T
  pure[T, L : Location](Self, L, T) -> Located[T, L]
}

type ConsoleLogger
impl Logger for ConsoleLogger

type Located[T, _]
impl Located {
  map[T, L, R](Self[T, L], (T) -> R) -> Self[R, L]
}

type MuteLogger
impl Logger for MuteLogger

type Unwrapper[_]
impl Unwrapper {
  unwrap[T, L](Self[L], Located[T, L]) -> T
}

// Type aliases

// Traits
pub(open) trait Location : Show + Hash {
  name(Self) -> String
}

pub trait Logger {
  info(Self, String) -> Unit
}

pub(open) trait Message : ToJson + @json.FromJson {
}

