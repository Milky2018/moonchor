package "Milky2018/moonchor"

import(
  "moonbitlang/core/json"
)

// Values
fn alert[Any](String) -> Any

fn check_location(Backend, &Location) -> Bool

fn comm[T : Msg, From : Location, To : Location](ChoreoContext, From, To, Located[T, From]) -> Located[T, To]

fn get_logger(Backend) -> &Logger

fn locally[T, L : Location](ChoreoContext, L, (Unwrapper[L]) -> T) -> Located[T, L]

fn make_console_logger() -> ConsoleLogger

fn make_local_backend(Array[&Location], logger~ : &Logger = ..) -> Backend

fn make_mute_logger() -> MuteLogger

fn run_async(() -> Unit) -> Unit

fn run_choreo[T, L : Location](Backend, (ChoreoContext) -> T, L, logger? : &Logger) -> T

fn suspend[A](((A) -> Unit) -> Unit) -> A

fn suspend_err[A](((A) -> Unit, (Error) -> Unit) -> Unit) -> A!

// Types and methods
type Backend
impl Backend {
  check_location(Self, &Location) -> Bool
  get_logger(Self) -> &Logger
}

type ChoreoContext
impl ChoreoContext {
  broadcast[T : Msg, L : Location](Self, L, Located[T, L]) -> T
  comm[T : Msg, From : Location, To : Location](Self, From, To, Located[T, From]) -> Located[T, To]
  locally[T, L : Location](Self, L, (Unwrapper[L]) -> T) -> Located[T, L]
}

type ConsoleLogger
impl Logger for ConsoleLogger

type Located[T, _]

type MuteLogger
impl Logger for MuteLogger

type Unwrapper[_]
impl Unwrapper {
  unwrap[T, L](Self[L], Located[T, L]) -> T
}

// Type aliases

// Traits
pub(open) trait Location : Show + Hash {
  name(Self) -> String
}

pub trait Logger {
  info(Self, String) -> Unit
}

pub(open) trait PolyLocation : Location + Msg {
}

